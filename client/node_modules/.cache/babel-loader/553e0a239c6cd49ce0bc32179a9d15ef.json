{"ast":null,"code":"/* global FileReader */\nvar toBuffer = require('typedarray-to-buffer');\nmodule.exports = function (file, opts) {\n  opts = opts || {};\n  var offset = opts.offset || 0;\n  var chunkSize = opts.chunkSize || 1024 * 1024; // default 1MB chunk has tolerable perf on large files\n\n  return function (end, cb) {\n    if (end) return cb(end);\n    // If finished reading then stop\n    if (offset >= file.size) return cb(true);\n    var fileReader = new FileReader(file);\n    fileReader.onloadend = function loaded(event) {\n      var data = event.target.result;\n      if (data instanceof ArrayBuffer) {\n        data = toBuffer(new Uint8Array(event.target.result));\n      }\n      cb(null, data);\n    };\n    fileReader.onerror = function (err) {\n      cb(err);\n    };\n    var endIndex = offset + chunkSize;\n    var slice = file.slice(offset, endIndex);\n    fileReader.readAsArrayBuffer(slice);\n    offset = endIndex;\n  };\n};","map":{"version":3,"names":["toBuffer","require","module","exports","file","opts","offset","chunkSize","end","cb","size","fileReader","FileReader","onloadend","loaded","event","data","target","result","ArrayBuffer","Uint8Array","onerror","err","endIndex","slice","readAsArrayBuffer"],"sources":["C:/Users/endur/Desktop/EmClickz/DAPPs/Dapp_IPFS_Storage/client/node_modules/pull-file-reader/index.js"],"sourcesContent":["/* global FileReader */\nvar toBuffer = require('typedarray-to-buffer')\n\nmodule.exports = function (file, opts) {\n  opts = opts || {}\n\n  var offset = opts.offset || 0\n  var chunkSize = opts.chunkSize || 1024 * 1024 // default 1MB chunk has tolerable perf on large files\n\n  return function (end, cb) {\n    if (end) return cb(end)\n    // If finished reading then stop\n    if (offset >= file.size) return cb(true)\n\n    var fileReader = new FileReader(file)\n\n    fileReader.onloadend = function loaded (event) {\n      var data = event.target.result\n\n      if (data instanceof ArrayBuffer) {\n        data = toBuffer(new Uint8Array(event.target.result))\n      }\n\n      cb(null, data)\n    }\n\n    fileReader.onerror = function (err) {\n      cb(err)\n    }\n\n    var endIndex = offset + chunkSize\n    var slice = file.slice(offset, endIndex)\n    fileReader.readAsArrayBuffer(slice)\n    offset = endIndex\n  }\n}\n"],"mappings":"AAAA;AACA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,sBAAsB,CAAC;AAE9CC,MAAM,CAACC,OAAO,GAAG,UAAUC,IAAI,EAAEC,IAAI,EAAE;EACrCA,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;EAEjB,IAAIC,MAAM,GAAGD,IAAI,CAACC,MAAM,IAAI,CAAC;EAC7B,IAAIC,SAAS,GAAGF,IAAI,CAACE,SAAS,IAAI,IAAI,GAAG,IAAI,EAAC;;EAE9C,OAAO,UAAUC,GAAG,EAAEC,EAAE,EAAE;IACxB,IAAID,GAAG,EAAE,OAAOC,EAAE,CAACD,GAAG,CAAC;IACvB;IACA,IAAIF,MAAM,IAAIF,IAAI,CAACM,IAAI,EAAE,OAAOD,EAAE,CAAC,IAAI,CAAC;IAExC,IAAIE,UAAU,GAAG,IAAIC,UAAU,CAACR,IAAI,CAAC;IAErCO,UAAU,CAACE,SAAS,GAAG,SAASC,MAAM,CAAEC,KAAK,EAAE;MAC7C,IAAIC,IAAI,GAAGD,KAAK,CAACE,MAAM,CAACC,MAAM;MAE9B,IAAIF,IAAI,YAAYG,WAAW,EAAE;QAC/BH,IAAI,GAAGhB,QAAQ,CAAC,IAAIoB,UAAU,CAACL,KAAK,CAACE,MAAM,CAACC,MAAM,CAAC,CAAC;MACtD;MAEAT,EAAE,CAAC,IAAI,EAAEO,IAAI,CAAC;IAChB,CAAC;IAEDL,UAAU,CAACU,OAAO,GAAG,UAAUC,GAAG,EAAE;MAClCb,EAAE,CAACa,GAAG,CAAC;IACT,CAAC;IAED,IAAIC,QAAQ,GAAGjB,MAAM,GAAGC,SAAS;IACjC,IAAIiB,KAAK,GAAGpB,IAAI,CAACoB,KAAK,CAAClB,MAAM,EAAEiB,QAAQ,CAAC;IACxCZ,UAAU,CAACc,iBAAiB,CAACD,KAAK,CAAC;IACnClB,MAAM,GAAGiB,QAAQ;EACnB,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"script"}