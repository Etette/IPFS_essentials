{"ast":null,"code":"import Web3 from \"web3\";\n\nconst getWeb3 = () => new Promise((resolve, reject) => {\n  // wait for loading completion to avoid race conditions with web3 injection timing.\n  window.addEventListener(\"load\", async () => {\n    //modern Dapp browsers...\n    if (window.ethereum) {\n      const web3 = new Web3(window.ethereum);\n\n      try {\n        // request account access if needed\n        await window.ethereum.enable(); // accounts now exposed\n\n        resolve(web3);\n      } catch (error) {\n        reject(error);\n      }\n    } // Legacy Dapp browsers...\n    else if (window.web3) {\n      // use Mist/metamask provider\n      const web3 = window.web3;\n      console.log(\"Injected web3 detected.\");\n      resolve(web3);\n    } // Fallback to localhost; use dev console port by default..\n    else {\n      const provider = new Web3.providers.HttpProvider(\"http://127.0.0.1:7545\");\n      const web3 = new Web3(provider);\n      console.log(\"No web3 instance injected, using Local web3.\");\n      resolve(web3);\n    }\n  });\n});\n\nexport default getWeb3;","map":{"version":3,"names":["Web3","getWeb3","Promise","resolve","reject","window","addEventListener","ethereum","web3","enable","error","console","log","provider","providers","HttpProvider"],"sources":["C:/Users/endur/Desktop/EmClickz/DAPPs/Dapp_IPFS_Storage/client/src/getWeb3.js"],"sourcesContent":["import Web3 from \"web3\";\r\n\r\nconst getWeb3 = () =>\r\n    new Promise((resolve, reject) => {\r\n        // wait for loading completion to avoid race conditions with web3 injection timing.\r\n        window.addEventListener(\"load\", async () => {\r\n            //modern Dapp browsers...\r\n            if (window.ethereum) {\r\n                const web3 = new Web3(window.ethereum);\r\n                try {\r\n                    // request account access if needed\r\n                    await window.ethereum.enable();\r\n                    // accounts now exposed\r\n                    resolve(web3);\r\n                } catch (error)  {\r\n                    reject(error);\r\n                }\r\n            }\r\n            // Legacy Dapp browsers...\r\n            else if (window.web3) {\r\n                // use Mist/metamask provider\r\n                const web3 = window.web3;\r\n                console.log(\"Injected web3 detected.\");\r\n                resolve(web3);\r\n            }\r\n            // Fallback to localhost; use dev console port by default..\r\n            else {\r\n                const provider = new Web3.providers.HttpProvider(\r\n                    \"http://127.0.0.1:7545\"\r\n                );\r\n                const web3 = new Web3(provider);\r\n                console.log(\"No web3 instance injected, using Local web3.\");\r\n                resolve(web3);\r\n            }\r\n        });\r\n    });\r\nexport default getWeb3;"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;;AAEA,MAAMC,OAAO,GAAG,MACZ,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;EAC7B;EACAC,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,YAAY;IACxC;IACA,IAAID,MAAM,CAACE,QAAX,EAAqB;MACjB,MAAMC,IAAI,GAAG,IAAIR,IAAJ,CAASK,MAAM,CAACE,QAAhB,CAAb;;MACA,IAAI;QACA;QACA,MAAMF,MAAM,CAACE,QAAP,CAAgBE,MAAhB,EAAN,CAFA,CAGA;;QACAN,OAAO,CAACK,IAAD,CAAP;MACH,CALD,CAKE,OAAOE,KAAP,EAAe;QACbN,MAAM,CAACM,KAAD,CAAN;MACH;IACJ,CAVD,CAWA;IAXA,KAYK,IAAIL,MAAM,CAACG,IAAX,EAAiB;MAClB;MACA,MAAMA,IAAI,GAAGH,MAAM,CAACG,IAApB;MACAG,OAAO,CAACC,GAAR,CAAY,yBAAZ;MACAT,OAAO,CAACK,IAAD,CAAP;IACH,CALI,CAML;IANK,KAOA;MACD,MAAMK,QAAQ,GAAG,IAAIb,IAAI,CAACc,SAAL,CAAeC,YAAnB,CACb,uBADa,CAAjB;MAGA,MAAMP,IAAI,GAAG,IAAIR,IAAJ,CAASa,QAAT,CAAb;MACAF,OAAO,CAACC,GAAR,CAAY,8CAAZ;MACAT,OAAO,CAACK,IAAD,CAAP;IACH;EACJ,CA7BD;AA8BH,CAhCD,CADJ;;AAkCA,eAAeP,OAAf"},"metadata":{},"sourceType":"module"}